{"contracts":{"src/Greeter.sol":{"Greeter":{"abi":[{"inputs":[{"internalType":"string","name":"_greeting","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"greet","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_greeting","type":"string"}],"name":"setGreeting","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":"M3B3","solc_metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_greeting\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"greet\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_greeting\",\"type\":\"string\"}],\"name\":\"setGreeting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Greeter.sol\":\"Greeter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/Greeter.sol\":{\"keccak256\":\"0x3f536e4667ce049b1b1461155afa5bac2908c8f5441beedc9df72de4041bb170\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://f94dc36047816db67677cc5b85c4b4f576789453cfc234475d40d3723d9ef697\",\"dweb:/ipfs/QmP6FJqqsYTdVq4fPRCKCG4epz1v5gHiQ8mcp94ZhwdN2Z\"]}},\"version\":1}","zk_version":"1.3.8"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"Greeter.sol:Greeter\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[5]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@calldatasize]\n\tadd\t128, r0, r1\n\tst.1\t64, r1\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_1\n\tadd\tstack[@calldatasize], r0, r1\n\tsub.s!\t4, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r1\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.eq\t@.BB0_72\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tsub.s\t4, r1, r2\n\tadd\t@CPI0_2[0], r0, r3\n\tsub.s!\t32, r2, r4\n\tadd\t0, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t0, r2, r5\n\tadd.le\t0, r0, r3\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tadd\tr4, r0, r2\n\tadd.eq\tr3, r0, r2\n\tsub.s!\t0, r2, r2\n\tjump.ne\t@.BB0_2\n\tptr.add\tstack[@ptr_calldata], r0, r2\n\tptr.add.s\t4, r2, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_1[0], r3, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r3, r4\n\tadd\t@CPI0_2[0], r0, r5\n\tsub!\tr4, r1, r6\n\tadd\t0, r0, r6\n\tadd.ge\tr5, r0, r6\n\tand\t@CPI0_2[0], r1, r1\n\tand\t@CPI0_2[0], r4, r4\n\tsub!\tr4, r1, r7\n\tadd.ge\t0, r0, r5\n\txor\tr4, r1, r1\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr6, r0, r1\n\tadd.eq\tr5, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t4, r3, r1\n\tptr.add\tr2, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_1[0], r1, r2\n\tjump.gt\t@.BB0_5\n\tadd\t191, r1, r4\n\tsub.s\t32, r0, r2\n\tand\tr4, r2, r4\n\tsub.s!\t@CPI0_1[0], r4, r5\n\tjump.gt\t@.BB0_5\n\tst.1\t64, r4\n\tst.1\t128, r1\n\tadd\t36, r3, r4\n\tadd\tr1, r4, r3\n\tadd\tstack[@calldatasize], r0, r5\n\tsub!\tr3, r5, r3\n\tjump.gt\t@.BB0_2\n\tand\t31, r1, r3\n\tptr.add\tstack[@ptr_calldata], r4, r4\n\tshr.s!\t5, r1, r5\n\tjump.eq\t@.BB0_86\n\tadd\tr0, r0, r6\n.BB0_52:\n\tshl.s\t5, r6, r7\n\tptr.add\tr4, r7, r8\n\tld\tr8, r8\n\tadd\t160, r7, r7\n\tst.1\tr7, r8\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_52\n.BB0_86:\n\tsub.s!\t0, r3, r6\n\tjump.eq\t@.BB0_54\n\tshl.s\t5, r5, r5\n\tptr.add\tr4, r5, r4\n\tshl.s\t3, r3, r3\n\tadd\t160, r5, r5\n\tld.1\tr5, r6\n\tshl\tr6, r3, r6\n\tshr\tr6, r3, r6\n\tld\tr4, r4\n\tsub\t256, r3, r3\n\tshr\tr4, r3, r4\n\tshl\tr4, r3, r3\n\tor\tr3, r6, r3\n\tst.1\tr5, r3\n.BB0_54:\n\tadd\t160, r1, r1\n\tst.1\tr1, r0\n\tld.1\t128, r1\n\tsub.s!\t@CPI0_1[0], r1, r3\n\tjump.gt\t@.BB0_5\n\tsload\tr0, r4\n\tand!\t1, r4, r3\n\tshr.s\t1, r4, r3\n\tand\t127, r3, r5\n\tadd.eq\tr5, r0, r3\n\tsub.s!\t31, r3, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr4, r5, r4\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_22\n\tsub.s!\t32, r3, r4\n\tjump.lt\t@.BB0_59\n\tadd\t31, r1, r4\n\tshr.s\t5, r4, r4\n\tadd\t@CPI0_7[0], r4, r4\n\tadd\t@CPI0_7[0], r0, r5\n\tsub.s!\t32, r1, r6\n\tadd.lt\tr5, r0, r4\n\tst.1\t0, r0\n\tadd\t31, r3, r3\n\tshr.s\t5, r3, r3\n\tadd\t@CPI0_7[0], r3, r3\n\tsub!\tr4, r3, r5\n\tjump.ge\t@.BB0_59\n.BB0_60:\n\tsstore\tr4, r0\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_60\n.BB0_59:\n\tsub.s!\t31, r1, r3\n\tjump.le\t@.BB0_69\n\tand!\tr1, r2, r3\n\tadd\t@CPI0_7[0], r0, r2\n\tadd\t160, r0, r4\n\tst.1\t0, r0\n\tjump.eq\t@.BB0_66\n\tadd\t32, r0, r6\n\tadd\t@CPI0_7[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_64:\n\tadd\tr6, r0, r5\n\tadd\t128, r5, r6\n\tld.1\tr6, r6\n\tsstore\tr2, r6\n\tadd\t32, r5, r6\n\tadd\t1, r2, r2\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r7\n\tjump.lt\t@.BB0_64\n\tadd\t160, r5, r4\n.BB0_66:\n\tsub!\tr3, r1, r3\n\tjump.ge\t@.BB0_68\n\tshl.s\t3, r1, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r5\n\tshr\tr5, r3, r3\n\txor\tr3, r5, r3\n\tld.1\tr4, r4\n\tand\tr4, r3, r3\n\tsstore\tr2, r3\n.BB0_68:\n\tadd\t1, r0, r2\n\tshl.s\t1, r1, r3\n\tjump\t@.BB0_61\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\tstack[@calldatasize], r0, r1\n\tadd\t31, r1, r2\n\tsub.s\t32, r0, r9\n\tand\tr2, r9, r4\n\tld.1\t64, r2\n\tadd\tr4, r2, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_1[0], r3, r5\n\tjump.gt\t@.BB0_5\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_5\n\tst.1\t64, r3\n\tand\t31, r1, r3\n\tptr.add\tstack[@ptr_calldata], r0, r4\n\tshr.s!\t5, r1, r5\n\tjump.eq\t@.BB0_87\n\tadd\tr0, r0, r6\n.BB0_8:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr4, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_8\n.BB0_87:\n\tsub.s!\t0, r3, r6\n\tjump.eq\t@.BB0_10\n\tshl.s\t5, r5, r5\n\tptr.add\tr4, r5, r4\n\tadd\tr2, r5, r5\n\tshl.s\t3, r3, r3\n\tld.1\tr5, r6\n\tshl\tr6, r3, r6\n\tshr\tr6, r3, r6\n\tld\tr4, r4\n\tsub\t256, r3, r3\n\tshr\tr4, r3, r4\n\tshl\tr4, r3, r3\n\tor\tr3, r6, r3\n\tst.1\tr5, r3\n.BB0_10:\n\tadd\t@CPI0_2[0], r0, r3\n\tsub.s!\t32, r1, r4\n\tadd\t0, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t@CPI0_2[0], r1, r5\n\tsub.s!\t0, r5, r6\n\tadd.le\t0, r0, r3\n\tsub.s!\t@CPI0_2[0], r5, r5\n\tadd.ne\tr4, r0, r3\n\tsub.s!\t0, r3, r3\n\tjump.ne\t@.BB0_2\n\tld.1\tr2, r4\n\tsub.s!\t@CPI0_1[0], r4, r3\n\tjump.gt\t@.BB0_2\n\tadd\tr2, r1, r3\n\tadd\tr4, r2, r1\n\tadd\t31, r1, r2\n\tadd\t@CPI0_2[0], r0, r4\n\tsub!\tr2, r3, r5\n\tadd\t0, r0, r5\n\tadd.ge\tr4, r0, r5\n\tand\t@CPI0_2[0], r2, r2\n\tand\t@CPI0_2[0], r3, r6\n\tsub!\tr2, r6, r7\n\tadd.ge\t0, r0, r4\n\txor\tr2, r6, r2\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tadd\tr5, r0, r2\n\tadd.eq\tr4, r0, r2\n\tsub.s!\t0, r2, r2\n\tjump.ne\t@.BB0_2\n\tld.1\tr1, r2\n\tsub.s!\t@CPI0_1[0], r2, r4\n\tjump.gt\t@.BB0_5\n\tadd\t63, r2, r4\n\tand\tr4, r9, r4\n\tld.1\t64, r7\n\tadd\tr7, r4, r4\n\tsub!\tr4, r7, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_1[0], r4, r6\n\tjump.gt\t@.BB0_5\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_5\n\tst.1\t64, r4\n\tst.1.inc\tr7, r2, r6\n\tadd\tr1, r2, r4\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r3\n\tjump.gt\t@.BB0_2\n\tsub.s!\t0, r2, r3\n\tjump.eq\t@.BB0_20\n\tadd\tr0, r0, r3\n.BB0_19:\n\tadd\tr3, r6, r4\n\tadd\t32, r3, r3\n\tadd\tr3, r1, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tsub!\tr3, r2, r4\n\tjump.lt\t@.BB0_19\n.BB0_20:\n\tadd\tr6, r2, r1\n\tst.1\tr1, r0\n\tld.1\tr7, r4\n\tsub.s!\t@CPI0_1[0], r4, r1\n\tjump.gt\t@.BB0_5\n\tsload\tr0, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_22\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_27\n\tadd\tr3, r0, stack-[1]\n\tadd\tr4, r0, stack-[3]\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr9, r0, stack-[5]\n\tadd\tr7, r0, stack-[4]\n\tadd\tr6, r0, stack-[2]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[2], r0, r6\n\tadd\tstack-[4], r0, r7\n\tadd\tstack-[5], r0, r9\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r4\n\tadd\t31, r4, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r4, r3\n\tadd.lt\t0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[1], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_27\n.BB0_28:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_28\n.BB0_27:\n\tsub.s!\t31, r4, r1\n\tjump.le\t@.BB0_37\n\tadd\tr4, r0, stack-[3]\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.lt\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr9, r0, stack-[5]\n\tadd\tr7, r0, stack-[4]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r6\n\tadd\tstack-[5], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r7\n\tand!\tr7, r3, r3\n\tadd\t32, r0, r2\n\tld\tr1, r1\n\tjump.eq\t@.BB0_34\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB0_33:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_33\n.BB0_34:\n\tsub!\tr3, r7, r3\n\tjump.ge\t@.BB0_36\n\tshl.s\t3, r7, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r6, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_36:\n\tadd\t1, r0, r1\n\tshl.s\t1, r7, r2\n\tjump\t@.BB0_29\n.BB0_72:\n\tcontext.get_context_u128\tr1\n\tsub.s!\t0, r1, r1\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r0, r1\n\tadd\tstack[@calldatasize], r1, r1\n\tadd\t@CPI0_2[0], r0, r2\n\tsub.s!\t0, r1, r3\n\tadd\t0, r0, r3\n\tadd.lt\tr2, r0, r3\n\tand\t@CPI0_2[0], r1, r1\n\tsub.s!\t0, r1, r4\n\tadd.le\t0, r0, r2\n\tsub.s!\t@CPI0_2[0], r1, r1\n\tadd\tr3, r0, r1\n\tadd.eq\tr2, r0, r1\n\tsub.s!\t0, r1, r1\n\tjump.eq\t@.BB0_74\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_74:\n\tsload\tr0, r4\n\tand!\t1, r4, r5\n\tshr.s\t1, r4, r1\n\tand\t127, r1, r2\n\tadd\tr1, r0, r3\n\tadd.eq\tr2, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\txor\tr4, r1, r1\n\tand!\t1, r1, r1\n\tjump.eq\t@.BB0_75\n.BB0_22:\n\tadd\t@CPI0_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_75:\n\tld.1\t64, r2\n\tst.1.inc\tr2, r3, r1\n\tsub.s!\t0, r5, r5\n\tjump.eq\t@.BB0_80\n\tst.1\t0, r0\n\tsub.s!\t0, r3, r4\n\tadd\tr0, r0, r4\n\tjump.eq\t@.BB0_76\n\tadd\t@CPI0_7[0], r0, r5\n\tadd\tr0, r0, r4\n.BB0_83:\n\tadd\tr1, r4, r6\n\tsload\tr5, r7\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r6\n\tjump.lt\t@.BB0_83\n\tjump\t@.BB0_76\n.BB0_80:\n\tsub.s\t256, r0, r5\n\tand\tr4, r5, r4\n\tst.1\tr1, r4\n\tsub.s!\t0, r3, r3\n\tadd\t32, r0, r4\n\tadd.eq\t0, r0, r4\n.BB0_76:\n\tadd\t63, r4, r3\n\tsub.s\t32, r0, r4\n\tand\tr3, r4, r5\n\tadd\tr5, r2, r3\n\tsub!\tr3, r5, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_1[0], r3, r6\n\tjump.gt\t@.BB0_5\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_5\n\tst.1\t64, r3\n\tadd\t32, r0, r5\n\tst.1.inc\tr3, r5, r5\n\tld.1\tr2, r2\n\tst.1\tr5, r2\n\tadd\t64, r3, r5\n\tsub.s!\t0, r2, r6\n\tjump.eq\t@.BB0_85\n\tadd\tr0, r0, r6\n.BB0_84:\n\tadd\tr6, r5, r7\n\tadd\tr1, r6, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r2, r7\n\tjump.lt\t@.BB0_84\n.BB0_85:\n\tadd\tr2, r5, r1\n\tst.1\tr1, r0\n\tadd\t95, r2, r1\n\tand\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.lt\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_5:\n\tadd\t@CPI0_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_37:\n\tsub.s!\t0, r4, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_39\n\tld.1\tr6, r1\n.BB0_39:\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r4, r1\n.BB0_29:\n\tor\tr2, r1, r1\n\tsstore\tr0, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_4[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_69:\n\tsub.s!\t0, r1, r2\n\tadd\tr0, r0, r2\n\tjump.eq\t@.BB0_71\n\tld.1\t160, r2\n.BB0_71:\n\tshl.s\t3, r1, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tand\tr2, r3, r3\n\tshl.s\t1, r1, r2\n.BB0_61:\n\tor\tr3, r2, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__staticcall:\n.func_begin1:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB1_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB1_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end1:\n\n\t.data\n\t.p2align\t5\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 18446744073709551615\nCPI0_2:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_3:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_4:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_5:\n\t.cell 3484299799\nCPI0_6:\n\t.cell 2752735330\nCPI0_7:\n\t.cell 18569430475105882587588266137607568536673111973893317399460219858819262702947\nCPI0_8:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_9:\n\t.cell 2852213850513516153367582212096\n","bytecode":{"object":""},"methodIdentifiers":{"greet()":"cfae3217","setGreeting(string)":"a4136862"}},"irOptimized":"/// @use-src 0:\"src/Greeter.sol\"\nobject \"Greeter_36\" {\n    code {\n        {\n            /// @src 0:143:535  \"contract Greeter {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"Greeter_36\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            let _2 := 32\n            if slt(sub(_1, memoryDataOffset), _2)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:143:535  \"contract Greeter {...\"\n            let offset := mload(memoryDataOffset)\n            let _3 := sub(shl(64, 1), 1)\n            if gt(offset, _3)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:143:535  \"contract Greeter {...\"\n            let _4 := add(memoryDataOffset, offset)\n            let _5 := 0x1f\n            if iszero(slt(add(_4, _5), _1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:143:535  \"contract Greeter {...\"\n            let _6 := mload(_4)\n            if gt(_6, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:143:535  \"contract Greeter {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:143:535  \"contract Greeter {...\" */ 0x24)\n            }\n            let _7 := not(31)\n            let array := allocate_memory(add(and(add(_6, _5), _7), _2))\n            mstore(array, _6)\n            if gt(add(add(_4, _6), _2), _1)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:143:535  \"contract Greeter {...\"\n            let i := /** @src -1:-1:-1 */ 0\n            /// @src 0:143:535  \"contract Greeter {...\"\n            for { } lt(i, _6) { i := add(i, _2) }\n            {\n                mstore(add(add(array, i), _2), mload(add(add(_4, i), _2)))\n            }\n            mstore(add(add(array, _6), _2), /** @src -1:-1:-1 */ 0)\n            /// @src 0:143:535  \"contract Greeter {...\"\n            let newLen := mload(array)\n            if gt(newLen, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:143:535  \"contract Greeter {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:143:535  \"contract Greeter {...\" */ 0x24)\n            }\n            let _8 := sload(/** @src -1:-1:-1 */ 0)\n            /// @src 0:143:535  \"contract Greeter {...\"\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 0:143:535  \"contract Greeter {...\"\n            let _9 := 1\n            length := shr(_9, _8)\n            let outOfPlaceEncoding := and(_8, _9)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, _2))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:143:535  \"contract Greeter {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:143:535  \"contract Greeter {...\" */ 0x24)\n            }\n            if gt(length, _5)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, 0)\n                /// @src 0:143:535  \"contract Greeter {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:143:535  \"contract Greeter {...\" */ _2)\n                let deleteStart := add(data, shr(5, add(newLen, _5)))\n                if lt(newLen, _2) { deleteStart := data }\n                let _10 := add(data, shr(5, add(length, _5)))\n                let start := deleteStart\n                for { } lt(start, _10) { start := add(start, _9) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 0:143:535  \"contract Greeter {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 0:143:535  \"contract Greeter {...\"\n            srcOffset := _2\n            switch gt(newLen, _5)\n            case 1 {\n                let loopEnd := and(newLen, _7)\n                mstore(/** @src -1:-1:-1 */ 0, 0)\n                /// @src 0:143:535  \"contract Greeter {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:143:535  \"contract Greeter {...\" */ _2)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 0:143:535  \"contract Greeter {...\"\n                for { } lt(i_1, loopEnd) { i_1 := add(i_1, _2) }\n                {\n                    sstore(dstPtr, mload(add(array, srcOffset)))\n                    dstPtr := add(dstPtr, _9)\n                    srcOffset := add(srcOffset, _2)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(array, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 0:143:535  \"contract Greeter {...\" */ add(shl(_9, newLen), _9))\n            }\n            default {\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 0:143:535  \"contract Greeter {...\"\n                if newLen\n                {\n                    value := mload(add(array, srcOffset))\n                }\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 0:143:535  \"contract Greeter {...\" */ or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_9, newLen)))\n            }\n            let _11 := mload(64)\n            let _12 := datasize(\"Greeter_36_deployed\")\n            codecopy(_11, dataoffset(\"Greeter_36_deployed\"), _12)\n            return(_11, _12)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n    }\n    /// @use-src 0:\"src/Greeter.sol\"\n    object \"Greeter_36_deployed\" {\n        code {\n            {\n                /// @src 0:143:535  \"contract Greeter {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0xa4136862 {\n                        if callvalue() { revert(_3, _3) }\n                        let _4 := 32\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_3, _3) }\n                        let offset := calldataload(4)\n                        let _5 := 0xffffffffffffffff\n                        if gt(offset, _5) { revert(_3, _3) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_3, _3) }\n                        let _6 := calldataload(add(4, offset))\n                        if gt(_6, _5)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _7 := not(31)\n                        finalize_allocation(_1, add(and(add(_6, 0x1f), _7), _4))\n                        mstore(_1, _6)\n                        if gt(add(add(offset, _6), 36), calldatasize()) { revert(_3, _3) }\n                        calldatacopy(add(_1, _4), add(offset, 36), _6)\n                        mstore(add(add(_1, _6), _4), _3)\n                        let newLen := mload(_1)\n                        if gt(newLen, _5)\n                        {\n                            mstore(_3, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(_3, 36)\n                        }\n                        let _8 := extract_byte_array_length(sload(_3))\n                        if gt(_8, 0x1f)\n                        {\n                            mstore(_3, _3)\n                            let _9 := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let deleteStart := add(_9, shr(5, add(newLen, 0x1f)))\n                            if lt(newLen, _4) { deleteStart := _9 }\n                            let _10 := add(_9, shr(5, add(_8, 0x1f)))\n                            let start := deleteStart\n                            for { } lt(start, _10) { start := add(start, 1) }\n                            { sstore(start, _3) }\n                        }\n                        let srcOffset := _3\n                        srcOffset := _4\n                        switch gt(newLen, 0x1f)\n                        case 1 {\n                            let loopEnd := and(newLen, _7)\n                            mstore(_3, _3)\n                            let dstPtr := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i := _3\n                            for { } lt(i, loopEnd) { i := add(i, _4) }\n                            {\n                                sstore(dstPtr, mload(add(_1, srcOffset)))\n                                dstPtr := add(dstPtr, 1)\n                                srcOffset := add(srcOffset, _4)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_1, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(_3, add(shl(1, newLen), 1))\n                        }\n                        default {\n                            let value := _3\n                            if newLen\n                            {\n                                value := mload(add(_1, srcOffset))\n                            }\n                            sstore(_3, or(and(value, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n                        }\n                        return(_3, _3)\n                    }\n                    case 0xcfae3217 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let memPtr := mload(_2)\n                        let ret := _3\n                        let slotValue := sload(_3)\n                        let length := extract_byte_array_length(slotValue)\n                        mstore(memPtr, length)\n                        let _11 := 0x20\n                        let _12 := 1\n                        switch and(slotValue, _12)\n                        case 0 {\n                            mstore(add(memPtr, _11), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _11)\n                        }\n                        case 1 {\n                            mstore(_3, _3)\n                            let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i_1 := _3\n                            for { } lt(i_1, length) { i_1 := add(i_1, _11) }\n                            {\n                                mstore(add(add(memPtr, i_1), _11), sload(dataPos))\n                                dataPos := add(dataPos, _12)\n                            }\n                            ret := add(add(memPtr, i_1), _11)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        let memPos := mload(_2)\n                        mstore(memPos, _11)\n                        let length_1 := mload(memPtr)\n                        mstore(add(memPos, _11), length_1)\n                        let i_2 := _3\n                        for { } lt(i_2, length_1) { i_2 := add(i_2, _11) }\n                        {\n                            mstore(add(add(memPos, i_2), _2), mload(add(add(memPtr, i_2), _11)))\n                        }\n                        mstore(add(add(memPos, length_1), _2), _3)\n                        return(memPos, add(sub(add(memPos, and(add(length_1, 31), not(31))), memPos), _2))\n                    }\n                }\n                revert(0, 0)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122020aa0f0526047360c0aa28fc6af90ac0e26469d3a983726f8a93345aec081a9864736f6c63430008130033\"\n    }\n}\n","hash":"0100008f72b444107077fc820872b20cc9f8a3f0e8666de05674fc18b5b114bf","factoryDependencies":{}}}},"sources":{"src/Greeter.sol":{"id":0,"ast":{"nodeType":"SourceUnit","name":null,"src":"38:499:0","memberName":null,"functionName":null,"AST":null,"nodes":[{"nodeType":"PragmaDirective","name":null,"src":"38:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"ContractDefinition","name":"Greeter","src":"143:392:0","memberName":null,"functionName":null,"AST":null,"nodes":[{"nodeType":"VariableDeclaration","name":"greeting","src":"167:23:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"greeting2","src":"197:24:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"VariableDeclaration","name":"greeting3","src":"228:24:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"","src":"261:76:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"298:39:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"309:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"309:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"greeting","src":"309:8:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"Identifier","name":"_greeting","src":"320:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"greet","src":"345:87:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"398:34:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"Return","name":null,"src":"409:15:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Identifier","name":"greeting","src":"416:8:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},{"nodeType":"FunctionDefinition","name":"setGreeting","src":"440:92:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":{"nodeType":"Block","name":null,"src":"493:39:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":[{"nodeType":"ExpressionStatement","name":null,"src":"504:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":{"nodeType":"Assignment","name":null,"src":"504:20:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":{"nodeType":"Identifier","name":"greeting","src":"504:8:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"rightHandSide":{"nodeType":"Identifier","name":"_greeting","src":"515:9:0","memberName":null,"functionName":null,"AST":null,"nodes":null,"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"length":null},"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null},"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}],"statements":null,"arguments":null,"declarations":null,"members":null,"components":null,"clauses":null,"options":null,"body":null,"trueBody":null,"falseBody":null,"expression":null,"condition":null,"initializationExpression":null,"leftExpression":null,"rightExpression":null,"subExpression":null,"trueExpression":null,"falseExpression":null,"loopExpression":null,"baseExpression":null,"indexExpression":null,"startExpression":null,"endExpression":null,"value":null,"initialValue":null,"externalCall":null,"eventCall":null,"errorCall":null,"leftHandSide":null,"rightHandSide":null,"length":null}}},"errors":[],"version":"0.8.19","long_version":"0.8.19+commit.7dd6d404.Linux.g++","zk_version":"1.3.8"}